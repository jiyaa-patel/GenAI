["Submitted to: Deepika Bishnoi Maam \n \nSubmitted by: 24ITK012 Tirth N Patel 24ITK003 Divy R Mevada \n \n \n \n \nTIME – TABLE GENERATOR  \n \n \n \n \n  \n  \n\nTable of Contents 1- Introduction 2- Objective 3- Algorithm 4- Flowchart 5- Code Input 6- Code output \n \n \n \n \n \n \n \n \nIntroduction:- \n A Timetable Generator is a software application programmed in the C programming \nlanguage that makes an otherwise laborious task of doing schedules or \ntimetables easier and automated. Creating an efficient, conflict-free timetable for \nclasses, teachers in educational institutions is quite a time-consuming and complex \ntask \n \n This project uses the logical properties of C to solve this problem by implementing \nalgorithms that consider all the given constraints: subjects taught and time slots. \n \n This way, institutions can avoid errors, save time, and ensure a fair share of \nresources. The program is created for both intuitive and user-friendly applications, \nmaking it a very useful tool for the administrator. Objective:- \nThe primary goal of the Time Table Generator project is to automatically generate a \nconflict-free timetable, ensuring that the following constraints and requirements are \nmet:", "nistrator. Objective:- \nThe primary goal of the Time Table Generator project is to automatically generate a \nconflict-free timetable, ensuring that the following constraints and requirements are \nmet: 1- Resource Allocation: Teachers, Subjects without overcrowding or other \nconflicts in a given time slot 2- Efficiency: Use less time and effort to create timetables 3- Scalability: Support various input data sizes-ranging from small schools to \nlarger institutions. 4- Flexibility: customizable constraints which can be used by students as well as \nfaculty. 5- Error Minimization: The generated timetable follows predefined constraints \nand thus has fewer manual correction errors. This project demonstrates how C programming can be used to address real-world \nproblems effectively by showing modular programming techniques, the utilization of \ndata structure, and algorithm design. Algorithm:- \n• Step 1:- Start \n• Step 2:- Input s (total number of subjects) \n• Step 3: Take input of subject’s name and store in subject[i] \n• Step 4:- Initialize a table with days in rows and time in columns \nchar table[6][8][50]; • Step 5:- Choose between S for students or F for faculty \nscanf(\" %c\",&type);", "name and store in subject[i] \n• Step 4:- Initialize a table with days in rows and time in columns \nchar table[6][8][50]; • Step 5:- Choose between S for students or F for faculty \nscanf(\" %c\",&type); • Step 6:- If S is chosen then if  (i<7) then fill slots with subjects randomize it \nrandomSubject(subject,s); and store in subjectArrays[i][j]  then copy it to table \n• Step 7:- If F is chosen then check if subjects are (i<7) then fill in subArr[i] \n• Step 7a:- Randomize it \nrandomSubject(subArr,s); to get different divisions and store in facArrays[i][j]  \n• Step 7b:- Ask the faculty for subject and then using switch case copy divisions in \nwhich faculty has lecture  \n• Step 7c:- Take divisions and fill in table to get timetable  \ntable[i][j] \n• Step 8:- If any mode in switch case is invalid then print invalid input \ndefault: \nprintf(\"Invalid Input\"); • Step 9:- End the code \n \n \n \n \n \n \n \n \nFLOWCHART:-  \n \n \n \n \n \n  \n \n \nINPUT CODE:-  \n#include<stdio.h> \n#include<string.h> \n\n#include<time.h> \n#include<stdlib.h> \n \nvoid randomSubject(char array[7][100],int n){ \n    int j; char temp[20]; for(int i=7-1;i>0;i--) \n    { \n        j = rand()%(i+1); strcpy(temp, array[i]);", "g.h> \n\n#include<time.h> \n#include<stdlib.h> \n \nvoid randomSubject(char array[7][100],int n){ \n    int j; char temp[20]; for(int i=7-1;i>0;i--) \n    { \n        j = rand()%(i+1); strcpy(temp, array[i]); strcpy(array[i], array[j]); strcpy(array[j], temp); } \n} \nint main() \n{ \n    int s,i; printf(\"Enter the total number of subject :\"); scanf(\"%d\",&s); while(s>=8) \n    { \n        printf(\"Subjects cannot be more than 7 \\n\"); printf(\"Enter the total number of subject :\"); scanf(\"%d\",&s); } \n        char table[6][8][50]; strcpy(table[0][0],\"|.........|\"); strcpy(table[0][1],\"| 11-12 |\"); strcpy(table[0][2],\"| 12-1 |\"); strcpy(table[0][3],\"| 1-2 |\"); strcpy(table[0][4],\"| 2-3 |\"); strcpy(table[0][5],\"| 3-4 |\"); strcpy(table[0][6],\"| 4-5 |\"); strcpy(table[0][7],\"| 5-6 |\"); strcpy(table[1][0],\"MONDAY   |\"); strcpy(table[2][0],\"TUESDAY  |\"); strcpy(table[3][0],\"WEDNESDAY|\"); strcpy(table[4][0],\"THURSDAY |\"); strcpy(table[5][0],\"FRIDAY   |\"); char subject[7][100]; for(i=0;i<s;i++) \n            { \n                printf(\"Enter %d subject : \",i+1); scanf(\" %s\",&subject[i]); } \n            char subArr[7][100] = {\"DIV A\",\"DIV B\",\"DIV C\"}; srand(time(NULL)); char type;", "(i=0;i<s;i++) \n            { \n                printf(\"Enter %d subject : \",i+1); scanf(\" %s\",&subject[i]); } \n            char subArr[7][100] = {\"DIV A\",\"DIV B\",\"DIV C\"}; srand(time(NULL)); char type; printf(\"S for student\\nF for Faculty :\"); scanf(\" %c\",&type); switch(type) \n        { \n            case 's': \n                        if(i<7) \n                        { \n                            for(i;i<7;i++) \n                            { \n                                strcpy(subject[i],\"  -  \"); } \n                        } \n                        char subjectArrays[5][7][100]; for(int i=0;i<5;i++){ \n                            randomSubject(subject,s); for(int j=0;j<7;j++) \n                            { \n                                strcpy(subjectArrays[i][j],subject[j]); } \n                        } \n                            for (int i = 1; i < 6; i++) { \n                                for (int j = 1; j < 8; j++) { \n                                    strcpy(table[i][j],subjectArrays[i-1][j-1]); } \n                            } \n                        for (int i = 0; i < 6 ;i++) \n                            { \n                            for (int j = 0; j < 8;", "i][j],subjectArrays[i-1][j-1]); } \n                            } \n                        for (int i = 0; i < 6 ;i++) \n                            { \n                            for (int j = 0; j < 8; j++) \n                            { \n                                printf(\"%-12s\", table[i][j]); } \n                            printf(\"\\n\"); printf(\"\\n\"); } \n                    break; case 'f': \n \n                    for(int i=3;i<7;i++) \n                    { \n                        strcpy(subArr[i],\"  -  \"); } \n                    char facArrays[5][7][100]; for(int i=0;i<5;i++){ \n                        randomSubject(subArr,s); for(int j=0;j<7;j++) \n                        { \n                            strcpy(facArrays[i][j],subArr[j]); } \n                    } \n \n                    char typef; printf(\"Enter Your Subject :\\n\\n\"); printf(\"c for CP\\n w for IWP\\n m for MATHS\\n i for CONT.INDIA\\n r for WRT.COM\\n t for \nSTATS\\n d for DRAWING \\n :-\"); scanf(\" %c\",&typef); switch(typef) \n                        { \n                        case 'c': \n                            printf(\"TIME TABLE FOR COMPUTER PROGRAMMING :\\n\"); for (int i = 1; i < 6;", "scanf(\" %c\",&typef); switch(typef) \n                        { \n                        case 'c': \n                            printf(\"TIME TABLE FOR COMPUTER PROGRAMMING :\\n\"); for (int i = 1; i < 6; i++) { \n                                    for (int j = 1; j < 8; j++) { \n                                        strcpy(table[i][j],facArrays[i-1][j-1]); } \n                                } \n \n                            for (int i = 0; i < 6 ;i++) \n                                { \n                                for (int j = 0; j < 8; j++) \n                                { \n                                    printf(\"%-12s\", table[i][j]); } \n                                printf(\"\\n\"); } \n                            break; case 'w': \n                            printf(\"TIME TABLE FOR WEB PROGRAMMING :\\n\"); for (int i = 1; i < 6; i++) { \n                                    for (int j = 1; j < 8; j++) { \n                                        strcpy(table[i][j],facArrays[i-1][j-1]); } \n                                } \n \n                            for (int i = 0; i < 6 ;i++) \n                                { \n                                for (int j = 0; j < 8;", "s[i-1][j-1]); } \n                                } \n \n                            for (int i = 0; i < 6 ;i++) \n                                { \n                                for (int j = 0; j < 8; j++) \n                                { \n                                    printf(\"%-12s\", table[i][j]); } \n                                printf(\"\\n\"); } \n                            break; case 'm': \n                            printf(\"TIME TABLE FOR MATHEMATICS 1 :\\n\"); for (int i = 1; i < 6; i++) { \n                                    for (int j = 1; j < 8; j++) { \n                                        strcpy(table[i][j],facArrays[i-1][j-1]); } \n                                } \n \n                            for (int i = 0; i < 6 ;i++) \n                                { \n                                for (int j = 0; j < 8; j++) \n                                { \n                                    printf(\"%-12s\", table[i][j]); } \n                                printf(\"\\n\"); } \n                            break; case 'i': \n                            printf(\"TIME TABLE FOR CONTEMPARORY OF INDIA :\\n\"); for (int i = 1; i < 6;", "} \n                                printf(\"\\n\"); } \n                            break; case 'i': \n                            printf(\"TIME TABLE FOR CONTEMPARORY OF INDIA :\\n\"); for (int i = 1; i < 6; i++) { \n                                    for (int j = 1; j < 8; j++) { \n                                        strcpy(table[i][j],facArrays[i-1][j-1]); } \n                                } \n \n                            for (int i = 0; i < 6 ;i++) \n                                { \n                                for (int j = 0; j < 8; j++) \n                                { \n                                    printf(\"%-12s\", table[i][j]); } \n                                printf(\"\\n\"); } \n                            break; case 'r': \n                            printf(\"TIME TABLE FOR WRITTEN COMMUNICATION:\\n\"); for (int i = 1; i < 6; i++) { \n                                    for (int j = 1; j < 8; j++) { \n                                        strcpy(table[i][j],facArrays[i-1][j-1]); } \n                                } \n                            for (int i = 0; i < 6 ;i++) \n                                { \n                                for (int j = 0; j < 8;", "ays[i-1][j-1]); } \n                                } \n                            for (int i = 0; i < 6 ;i++) \n                                { \n                                for (int j = 0; j < 8; j++) \n                                { \n                                    printf(\"%-12s\", table[i][j]); } \n                                printf(\"\\n\"); } \n                            break; case 't': \n                            printf(\"TIME TABLE FOR STATISTICS :\\n\"); for (int i = 1; i < 6; i++) { \n                                    for (int j = 1; j < 8; j++) { \n                                        strcpy(table[i][j],facArrays[i-1][j-1]); } \n                                } \n                            for (int i = 0; i < 6 ;i++) \n                                { \n                                for (int j = 0; j < 8; j++) \n                                { \n                                    printf(\"%-12s\", table[i][j]); } \n                                printf(\"\\n\"); } \n                            break; case 'd': \n                            printf(\"TIME TABLE FOR ENGINEERING DRAWING :\\n\"); for (int i = 1; i < 6;", "; } \n                                printf(\"\\n\"); } \n                            break; case 'd': \n                            printf(\"TIME TABLE FOR ENGINEERING DRAWING :\\n\"); for (int i = 1; i < 6; i++) { \n                                    for (int j = 1; j < 8; j++) { \n                                        strcpy(table[i][j],facArrays[i-1][j-1]); } \n                                } \n \n                            for (int i = 0; i < 6 ;i++) \n                                { \n                                for (int j = 0; j < 8; j++) \n                                { \n                                    printf(\"%-12s\", table[i][j]); } \n                                printf(\"\\n\"); } \n                            break; default: \n                                 printf(\"Invalid Input\"); } \n                \n        } \n \n    return 0; } \n \n \nOUTPUT:- \nFor students \n \n \n \n \n \nFor Faculty \n\n \n \n \nConclusion:-  \nSo in this innovative project made using c language we learned to generate a table \nwith randomized subjects"]